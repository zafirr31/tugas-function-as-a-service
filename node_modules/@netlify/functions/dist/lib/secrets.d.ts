import { Context as HandlerContext, Context } from '../function/context';
import { Event as HandlerEvent } from '../function/event';
import { Handler, HandlerCallback } from '../function/handler';
import { HandlerEventWithOneGraph, NetlifySecrets } from './secrets_helper';
export { getSecrets } from './secrets_helper';
export interface ContextWithSecrets extends Context {
    secrets: NetlifySecrets;
}
export declare type HandlerWithSecrets = Handler<ContextWithSecrets>;
export declare const withSecrets: (handler: Handler<ContextWithSecrets>) => (event: HandlerEventWithOneGraph | HandlerEvent, context: HandlerContext, callback: HandlerCallback) => Promise<void | import("../function").HandlerResponse>;
