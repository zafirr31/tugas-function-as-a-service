{
  "version": 3,
  "sources": ["../../home/zafirr/Kuliah/Pemfung/TugasFaaS/my_functions/helpers.ts"],
  "sourceRoot": "/tmp/tmp-478-t7nT6TpBCFHF",
  "sourcesContent": ["import { createHash } from 'crypto';\nimport { Either, left, right } from \"fp-ts/Either\";\n\nexport const fastModularExponentiation = (b: bigint, e: bigint, m: bigint) => {\n    if(BigInt(e) == BigInt(0))\n        return BigInt(1)\n    var t = (BigInt(BigInt(e) & BigInt(1)) == BigInt(1)) ? BigInt(BigInt(b) % BigInt(m)) : BigInt(1)\n    return BigInt((t * fastModularExponentiation(BigInt(BigInt(b) * BigInt(b) % BigInt(m)), BigInt(BigInt(e) >> BigInt(1)), BigInt(m))) % BigInt(m))\n}\n\nexport const longToBytes = (event: string) => {\n    if(BigInt(event) === BigInt(\"0\"))\n        return \"\"\n    return longToBytes((BigInt(event) >> BigInt(\"8\")).toString()) + String.fromCharCode(parseInt(BigInt(BigInt(event) % BigInt(\"256\")).toString()))\n}\n\nexport const bytesToLong = (event: string) => {\n    if(event.length == 0)\n        return 0\n    return BigInt((BigInt(bytesToLong(event.slice(0, -1))) << BigInt(8)) + BigInt(event.slice(-1).charCodeAt(0)))\n}\n\nconst extendedEuclideanAlgorithm = (a: bigint, b: bigint) => {\n    if(BigInt(a) == BigInt(0))\n        return [BigInt(b), BigInt(0), BigInt(1)]\n    var [x, y, z] = extendedEuclideanAlgorithm(BigInt(b % a), BigInt(a))\n    return [BigInt(x), BigInt(z - (b / a)*y), BigInt(y)]\n}\n\nexport const inverseModulo = (a: string, n: string) => {\n    var [g, res, dummy] = extendedEuclideanAlgorithm(BigInt(a), BigInt(n))\n    if(g != BigInt(1))\n        throw \"Inverse Modulo does not exist\"\n    if(BigInt(res) < 0)\n        return BigInt(BigInt(res) + BigInt(n))\n    return BigInt(res)\n}\n\nexport const calculateHash = (event) => {\n    return createHash('sha256').update(event).digest('hex')\n}\n\nexport const onlyDigits = (value) => {\n    return /^\\d+$/.test(value);\n}\n\nexport const onlyHexaDecimal = (value) => {\n    return /^[a-f0-9]+$/.test(value);\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA2B;AAGpB,IAAM,4BAA4B,CAAC,GAAW,GAAW,MAAc;AAC1E,MAAG,OAAO,MAAM,OAAO;AACnB,WAAO,OAAO;AAClB,MAAI,IAAK,OAAO,OAAO,KAAK,OAAO,OAAO,OAAO,KAAM,OAAO,OAAO,KAAK,OAAO,MAAM,OAAO;AAC9F,SAAO,OAAQ,IAAI,0BAA0B,OAAO,OAAO,KAAK,OAAO,KAAK,OAAO,KAAK,OAAO,OAAO,MAAM,OAAO,KAAK,OAAO,MAAO,OAAO;AAAA;AAG1I,IAAM,cAAc,CAAC,UAAkB;AAC1C,MAAG,OAAO,WAAW,OAAO;AACxB,WAAO;AACX,SAAO,YAAa,QAAO,UAAU,OAAO,MAAM,cAAc,OAAO,aAAa,SAAS,OAAO,OAAO,SAAS,OAAO,QAAQ;AAAA;AAGhI,IAAM,cAAc,CAAC,UAAkB;AAC1C,MAAG,MAAM,UAAU;AACf,WAAO;AACX,SAAO,OAAQ,QAAO,YAAY,MAAM,MAAM,GAAG,SAAS,OAAO,MAAM,OAAO,MAAM,MAAM,IAAI,WAAW;AAAA;AAG7G,IAAM,6BAA6B,CAAC,GAAW,MAAc;AACzD,MAAG,OAAO,MAAM,OAAO;AACnB,WAAO,CAAC,OAAO,IAAI,OAAO,IAAI,OAAO;AACzC,MAAI,CAAC,GAAG,GAAG,KAAK,2BAA2B,OAAO,IAAI,IAAI,OAAO;AACjE,SAAO,CAAC,OAAO,IAAI,OAAO,IAAK,IAAI,IAAG,IAAI,OAAO;AAAA;AAG9C,IAAM,gBAAgB,CAAC,GAAW,MAAc;AACnD,MAAI,CAAC,GAAG,KAAK,SAAS,2BAA2B,OAAO,IAAI,OAAO;AACnE,MAAG,KAAK,OAAO;AACX,UAAM;AACV,MAAG,OAAO,OAAO;AACb,WAAO,OAAO,OAAO,OAAO,OAAO;AACvC,SAAO,OAAO;AAAA;AAGX,IAAM,gBAAgB,CAAC,UAAU;AACpC,SAAO,8BAAW,UAAU,OAAO,OAAO,OAAO;AAAA;AAG9C,IAAM,aAAa,CAAC,UAAU;AACjC,SAAO,QAAQ,KAAK;AAAA;AAGjB,IAAM,kBAAkB,CAAC,UAAU;AACtC,SAAO,cAAc,KAAK;AAAA;",
  "names": []
}
